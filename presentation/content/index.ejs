<section>
  <h1>Elixir</h1>

  <small>
    Yevhen Shemet<br />
    github: <a target="_blank" href="https://github.com/yevhene/present-elixir">yevhene/present-elixir</a>
  </small>
</section>

<section>
  <h4>History</h4>

  <div><b>José Valim</b> is the creator of the <b>Elixir</b> programming language, an R&amp;D project of Plataformatec (at <b>2011</b>). His goals were to enable higher extensibility and productivity in the Erlang VM while keeping compatibility with Erlang's ecosystem.</div>
</section>

<section>
  <section>
    <h4>Let's brew the Elixir</h4>
  </section>

  <section>
    <h4>First, take a pot</h4>

    <img src="images/cauldron.jpg" />
  </section>

  <section>
    <h4>Second, take a pot</h4>

    <img src="images/pot.jpg" />
  </section>
</section>

<section>
  <h3>Ingridient 1: Erlang</h3>

  <section>
    <h4>History</h3>

    <div>It was originally a proprietary language within <b>Ericsson</b>, developed by <b>Joe Armstrong</b>, <b>Robert Virding</b> and <b>Mike Williams</b> in <i>1986</i>, but was <b>released as open source in 1998</b>. Erlang/OTP is supported and maintained by the OTP product unit at Ericsson.</div>
  </section>

  <section>
    <h4>History</h3>

    <div>The name <b>"Erlang"</b>, attributed to <b>Bjarne Däcker</b>, has been presumed by those working on the telephony switches (for whom the language was designed) to be a reference to <b>Danish mathematician and engineer Agner Krarup Erlang</b> as well as a syllabic abbreviation of <b>"Ericsson Language"</b>.</div>
  </section>

  <section>
    <h4>Scalable</h4>

    <ul>
      <li>Parallel</li>
      <li>Distributed</li>
      <li>Can utilize all of your resources</li>
    </ul>

    <div><i>Demo: ring</i></div>
  </section>

  <section>
    <h4>Functional</h4>

    <ul>
      <li>Immutability</li>
      <li>Pattern Matching (also Binary)</li>
      <li>Pure functions (preferred)</li>
      <li>Recursion (also Tail)</li>
    </ul>
  </section>

  <section>
    <h4>Actor-based</h4>

    <ul>
      <li>Every process has event loop</li>
      <li>Processes communicate through messages</li>
      <li>Message waits in "mailbox" utill it is processed</li>
      <li>Process decides when and how to interpret message</li>
    </ul>
  </section>

  <section>
    <h4>Actors is advanced OOP</h4>

    <pre><code class="hljs" data-trim contenteditable>
-module(bank).
-compile(export_all).

hreschatik() -&gt;
  receive
    {From, {store, _Money}} -&gt;
      %% Store money
      From ! {self(), ok},
      hreschatik();
    {From, {take, _Money}} -&gt;
      %% Can't take money back
      From ! {self(), not_found},
      hreschatik();
    terminate -&gt;
      ok
end.
    </code></pre>

    <pre><code class="hljs" data-trim contenteditable>
Pid = spawn(bank, hreschatik).
Pid ! {self(), {store, 100}}.
    </code></pre>
  </section>

  <section>
    <h4>Supervision Trees</h4>

    <img src="images/supervision-trees.png" />

    <div><a href="https://bitbucket.org/ferd/chut"><i>https://bitbucket.org/</i>ferd/chut</a></div>
  </section>

  <section>
    <h4>Reliable</h4>

    <ul>
      <li>9x9 Reliability (99.9999999% &gt; 6σ)</li>
      <li>Supervision Trees</li>
      <li>Let if Fall</li>
      <li>Hot Deploy</li>
    </ul>
  </section>

  <section>
    <h4>Mature</h4>

    <ul>
      <li>Ecosystem</li>
      <li>BEAM</li>
      <li>OTP</li>
      <li>Tools</li>
      <li>Libraries</li>
    </ul>
  </section>

  <section>
    <h4>Widely adopted</h4>

    <ul>
      <li>Amazon</li>
      <li>Facebook</li>
      <li>WhatsApp</li>
      <li>Ericsson</li>
    </ul>
  </section>

  <section>
    <h4>Complex heritage</h4>

    <ul>
      <li>Prolog derived (;,.)</li>
      <li>Alien syntax</li>
      <li>Single assingment</li>
      <li>Focused on Telecom</li>
      <li>Hard to use UTF-8</li>
    </ul>
  </section>

  <section>
    <h4>Summary</h4>

    <h5>Beautiful inside scary outside</h5>
  </section>
</section>

<section>
  <h3>Ingridient 2: Ruby</h3>

  <section>
    <h4>Let's mix in some neat Ruby syntax</h3>
  </section>
</section>

<section>
  <h3>Functions</h3>

  <section>
    <h4>Call</h4>

    <pre><code class="hljs" data-trim contenteditable>
IO.puts "Hello World!"
    </code></pre>

    <pre><code class="hljs" data-trim contenteditable>
iex
    </code></pre>
  </section>

  <section>
    <h4>Declare</h4>

    <pre><code class="hljs" data-trim contenteditable>
defmodule Greeter do
  def hello(name) do
    IO.puts "Hello #{name}"
  end
end

Greeter.hello("World")
    </code></pre>

    <pre><code class="hljs" data-trim contenteditable>
elixir hello-fn.exs
    </code></pre>
  </section>

  <section>
    <h4>Short Notation</h4>

    <pre><code class="hljs" data-trim contenteditable>
defmodule Greeter, do: def hello(name), do: IO.puts "Hello #{name}"

Greeter.hello("World")
    </code></pre>
  </section>

  <section>
    <h4>Recursion</h4>

    <pre><code class="hljs" data-trim contenteditable>
defmodule Fib do
  def fib(0), do: 0
  def fib(1), do: 1
  def fib(n), do: fib(n - 1) + fib(n - 2)
end

IO.puts Fib.fib(10)
    </code></pre>
  </section>

  <section>
    <h4>Guards</h4>

    <pre><code class="hljs" data-trim contenteditable>
defmodule Fib do
  def fib(n) when n &gt; 40, do: raise "You will never get it"
  def fib(0), do: 0
  def fib(1), do: 1
  def fib(n), do: fib(n - 1) + fib(n - 2)
end

IO.puts Fib.fib(41)
    </code></pre>
  </section>

  <section>
    <h4>Tail call recursion</h4>

    <pre><code class="hljs" data-trim contenteditable>
defmodule Fib do
  def fib(a), do: fib(1, 1, a)

  defp fib(a, _, 0), do: a
  defp fib(a, b, n), do: fib(b, a + b, n - 1)
end

IO.puts Fib.fib(80)
    </code></pre>
  </section>

  <section>
    <h4>Higher Order Functions</h4>

    <pre><code class="hljs" data-trim contenteditable>
Enum.map([1, 2, 3], fn x -&gt;
  x * 2
end)
    </code></pre>
  </section>

  <section>
    <h4>Literal</h4>

    <pre><code class="hljs" data-trim contenteditable>
&amp;(&amp;1 * 2)

&amp;IO.puts/1
    </code></pre>
  </section>

  <section>
    <h4>Pipe operator</h4>

    <pre><code class="hljs" data-trim contenteditable>
string = "hello, world!"
words = String.split(string, " ")
capitalized_words = Enum.map(words, &amp;String.capitalize/1)
Enum.join(capitalized_words, " ")
    </code></pre>

    <pre><code class="hljs" data-trim contenteditable>
"hello, world!"
|&gt; String.split(" ")
|&gt; Enum.map(&amp;String.capitalize/1)
|&gt; Enum.join
    </code></pre>
  </section>

  <section>
    <h4>Streams</h4>

    <pre><code class="hljs" data-trim contenteditable>
0
|&gt; Stream.iterate(&amp;(&amp;1 + 1))
|&gt; Stream.filter(fn x -&gt; rem(x, 2) == 0 end)
|&gt; Stream.take(10)
|&gt; Enum.map(&amp;IO.puts/1)
    </code></pre>
  </section>
</section>

<section>
  <h3>Data</h3>

  <section>
    <h4>Complex data types</h4>

    <pre><code class="hljs" data-trim contenteditable>
[1, 2, 3] # List

{:ok, "result"} # Tuple

[{:a, 8}, {:b, 9}] == [a: 8, b: 9] # Keyword list

%{a: 8, b: 9} # Map
    </code></pre>
  </section>

  <section>
    <h4>Match operator =</h4>

    <pre><code class="hljs" data-trim contenteditable>
x = 28
28 = x
x = 29
^x = 29
    </code></pre>
  </section>

  <section>
    <h4>Destruction</h4>

    <pre><code class="hljs" data-trim contenteditable>
user = %{name: "Jack", age: 27}

%{age: x} = user
x = x + 1

user = %{user | age: x}
    </code></pre>
  </section>

  <section>
    <h4>Pattern matching</h4>

    <pre><code class="hljs" data-trim contenteditable>
case {1, 2, 3} do
  [1 | _] -&gt;
    "Will not match"
  {1, x, 3} when x &gt; 0 -&gt;
    "Will match"
  _ -&gt;
    "Would match, if guard condition were not satisfied"
end
    </code></pre>
  </section>

  <section>
    <h4>Function head pattern matching</h4>

    <pre><code class="hljs" data-trim contenteditable>
def check([1 | _]), do: "List started with one"
def check({1, x, 3}) when x &gt; 0, do: "Tuple with one and three"
def check(_), do: "Anything"

check({1, 2, 3}) #=&gt; "Tuple with one and three"
    </code></pre>
  </section>

  <section>
    <h4>Binary pattern matching</h4>

    <pre><code class="hljs" data-trim contenteditable>
png = File.read!("/path/to/png/file.png")

&lt;&lt;0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A,
  length  :: size(32),
  "IHDR",
  width   :: size(32),
  height  :: size(32),
  rest
&gt;&gt; = png
    </code></pre>
  </section>
</section>

<section>
  <h3>Structs</h3>

  <section>
    <h4>Declare</h4>

    <pre><code class="hljs" data-trim contenteditable>
defmodule User do
  defstruct name: "John", age: 27
end
    </code></pre>
  </section>

  <section>
    <h4>Use</h4>

    <pre><code class="hljs" data-trim contenteditable>
user = %User{name: "Jack"}

%User{age: x} = user
^x = 27

%{__struct__: s} = user
^s = User
    </code></pre>
  </section>

  <section>
    <h4>Protocols</h4>

    <pre><code class="hljs" data-trim contenteditable>
defprotocol String.Chars do
  def to_string(term)
end
    </code></pre>

    <pre><code class="hljs" data-trim contenteditable>
defimpl String.Chars, for: User do
  def to_string(%User{name: name}), do: name
end
    </code></pre>

    <pre><code class="hljs" data-trim contenteditable>
user = %User{}
IO.puts user #=&gt; John
    </code></pre>
  </section>
</section>

<section>
  <h3>Ingridient 3: LISP</h3>

  <section>
    <h4>Let's mix in some wild LISP metaprogramming</h4>
  </section>
</section>

<section>
  <h3>Metaprogramming</h3>

  <section>
    <h4>Macros</h4>

    <pre><code class="hljs" data-trim contenteditable>
if x &gt; 0 do
  "This won't be seen"
else
  "This will"
end
    </code></pre>

    <pre><code class="hljs" data-trim contenteditable>
if x &gt; 0, do: "This won't be seen", else: "This will"
    </code></pre>
  </section>

  <section>
    <h4>defmacro</h4>

    <pre><code class="hljs" data-trim contenteditable>
defmacro if(clause, do: then, else: not_then) do
  quote do
    cond do
      unquote(clause) -&gt; unquote(then)
      true -&gt; unquote(not_then)
    end
  end
end
    </code></pre>

    <div><a href="https://github.com/elixir-lang/elixir/blob/5a973b92b0efb8cef532433ed58708e9c906cf58/lib/elixir/lib/kernel.ex#L2996">elixir/lib/kernel.ex:2996</a></div>
  </section>

  <section>
    <h4>Abstract Syntax Tree</h4>

    <pre><code class="hljs" data-trim contenteditable>
2 + 3 = 5
    </code></pre>

    <pre><code class="hljs" data-trim contenteditable>
{:=, [], [{:+, [context: Elixir, import: Kernel], [2, 3]}, 5]}
    </code></pre>

    <img src="images/ast.jpg" />
  </section>

  <section>
    <h4>AST</h4>

    <pre><code class="hljs" data-trim contenteditable>
quote do
  def foo do
    :bar
  end
end
    </code></pre>

    <pre><code class="hljs" data-trim contenteditable>
{:def, [context: Elixir, import: Kernel],
 [{:foo, [context: Elixir], Elixir}, [do: :bar]]}
    </code></pre>
  </section>

  <section>
    <h4>AST match</h4>

    <pre><code class="hljs" data-trim contenteditable>
defmacro js({:+, _, args}) do
  "#{Enum.at(args, 0)}" &lt;&gt; "#{Enum.at(args, 1)}"
end
    </code></pre>

    <pre><code class="hljs" data-trim contenteditable>
js "2" + 3
    </code></pre>
  </section>
</section>

<section>
  <h3>Elixir is ready!</h3>

  <section>
    <img src="images/elixir.png" />
  </section>

  <section>
    <h4>Let's pour it on Rails</h4>
  </section>
</section>

<section>
  <h3>Phoenix</h3>

  <section>
    <ul>
      <li>Real-time channels</li>
      <li>Large amounts of background processing</li>
      <li>Real-time state updates</li>
      <li>Non-stop applications</li>
    </ul>
  </section>
</section>

<section>
  <h3>Plug</h3>

  <section>
    <ul>
      <li>A specification for composable modules between web applications</li>
      <li>Connection adapters for different web servers in the Erlang VM</li>
    </ul>
  </section>

  <section>
    <h4>Example</h4>

    <pre><code class="hljs" data-trim contenteditable>
defmodule NovelWeb.Plug.CurrentUser do
  import Guardian.Plug, only: [current_resource: 1]
  import Plug.Conn, only: [assign: 3]

  def init(opts), do: opts

  def call(conn, _opts) do
    current_user = current_resource(conn)
    assign(conn, :current_user, current_user)
  end
end
    </code></pre>
  </section>

  <section>
    <h4>Plug in Routes</h4>

    <pre><code class="hljs" data-trim contenteditable>
defmodule NovelWeb.Router do
  use NovelWeb, :router

  pipeline :guardian do
    plug Ueberauth
    plug Guardian.Plug.Pipeline,
      module: NovelWeb.Guardian,
      error_handler: NovelWeb.Guardian.ErrorHandler
    plug Guardian.Plug.VerifySession
    plug Guardian.Plug.LoadResource, allow_blank: true
    plug NovelWeb.Plug.CurrentUser
  end

  scope "/", NovelWeb do
    pipe_through [:guardian]
  end
end
    </code></pre>
  </section>

  <section>
    <h4>Plug in Controller</h4>

    <pre><code class="hljs" data-trim contenteditable>
defmodule TestApp.PageController do
  use TestApp.Web, :controller

  plug NovelWeb.Plug.CurrentUser when action in [:index]

  def index(conn, _params) do
    render conn, "index.html"
  end
end
    </code></pre>
  </section>
</section>

<section>
  <h3>Ecto</h3>

  <section>
    <div>A database wrapper and language integrated query for Elixir.</div>
  </section>

  <section>
    <h4>Schema</h4>

    <pre><code class="hljs" data-trim contenteditable>
use Ecto.Schema

schema "posts" do
  field :title, :string
  field :body, :text
end
    </code></pre>
  </section>

  <section>
    <h4>Changeset</h4>

    <pre><code class="hljs" data-trim contenteditable>
import Ecto.Changeset

def changeset(%Post{} = post, attrs) do
  post
  |&gt; cast(attrs, [:title, :body])
  |&gt; validate_required(:title)
end
    </code></pre>
  </section>

  <section>
    <h4>Repo</h4>

    <pre><code class="hljs" data-trim contenteditable>
alias MyApp.{Post, Repo}

Repo.insert(changeset)
Repo.update(changeset)
Repo.delete(post)
Repo.all(Post)
Repo.get!(Post, id)
    </code></pre>
  </section>

  <section>
    <h4>Query</h4>

    <pre><code class="hljs" data-trim contenteditable>
import Ecto.Query, only: [from: 2]

query =
  from p in Post,
    join: t in Tag, where: t.post_id == p.id
    select: [p.title, t.name]
    </code></pre>
  </section>
</section>

<section>
  <h2>Questions?</h2>
</section>

<section>
  <h3>References</h3>

  <ul>
    <li><a href="https://learnyousomeerlang.com">learnyousomeerlang.com</a></li>
    <li><a href="https://www.mojotech.com/blog/how-elixir-ecto-promotes-well-designed-applications/">How Elixir's Ecto Promotes Well-Designed Applications</a></li>
    <li><a href="https://elixirschool.com">Elixir School</a></li>
  </ul>
</section>
